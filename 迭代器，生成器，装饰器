迭代器是如果它的类有next 方法和iter 方法返回自己本身，对于string、list、dict、tuple 等这类容器对象，使用for 循环遍历是很方便的。在后台for 语句对容器对象调用iter()函数，iter()是python 的内置函数。iter()会返回一个定义了next()方法的迭代器对象，它在容器中逐个访问容器内元素，next()也是python 的内置函数。
可以被next()方法和iter（方法）调用并不断返回下一个值的对象称为迭代器：Iterator。

生成器（Generator）是创建迭代器的简单而强大的工具。它们写起来就像是正规的函数，只是在需要返回数据的时候使用yield 语句。每次next()被调用时，生成器会返回它脱离的位置（它记忆语句最后一次执行的位置和所有的数据值）

什么时候用到生成器？
当创建列表只是一个中间过程的时候，为了避免创建庞大的列表，我们就可以使用生成器来表示。比如，我们生成一个购物车中的商品列表，拿到某个商品就可以直接使用生成器。

区别：生成器能做到迭代器能做的所有事,而且因为自动创建了iter()和next()方法,生成器显得特别简洁,而且生成器也是高效的，使用生成器表达式取代列表解析可以同时节省内存。除了创建和保存程序状态的自动方法,当发生器终结时,还会自动抛出StopIteration 异常。
生成器一定是迭代器    

闭包： 一个外部函数，一个内部函数，内部函数用到了外部函数的变量，并且返回内部函数

装饰器的使用：（限制函数的执行时间）
装饰器的应用：登陆注册；权限校验，在函数外层套上权限校验的代码；插入函数 作为函数的运行日志
高阶函数  map  reduuce  filter 
map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，依次作用

reduce函数接收两个参数，把一个函数作用在一个序列上，reduce把结果继续和序列的下一个元素做累积计算